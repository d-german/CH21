using System;
using System.Diagnostics;
using System.Numerics;
using NUnit.Framework;

namespace ch21_tests
{
    public class FibonacciGeneratorTest
    {
        private Stopwatch _stopWatch;

        private const int N = 6;
        private static readonly BigInteger Result = 8;

        #region other values

//        private const int N = 20;
//        private static readonly BigInteger Result = 6765;

//        private const int N = 40;
//        private const ulong Result = 102334155;

//        private const int N = 45;
//        private static readonly BigInteger Result = 1134903170;

//        private const int N = 1500;
//        private static readonly BigInteger Result = BigInteger.Parse("13551125668563101951636936867148408377786010712418497242133543153221487310873528750612259354035717265300373778814347320257699257082356550045349914102924249595997483982228699287527241931811325095099642447621242200209254439920196960465321438498305345893378932585393381539093549479296194800838145996187122583354898000");

//        private const int N = 2000;
//        private static readonly BigInteger Result = BigInteger.Parse("4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125");

//        private const int N = 3000;
//        private static readonly BigInteger Result = BigInteger.Parse("410615886307971260333568378719267105220125108637369252408885430926905584274113403731330491660850044560830036835706942274588569362145476502674373045446852160486606292497360503469773453733196887405847255290082049086907512622059054542195889758031109222670849274793859539133318371244795543147611073276240066737934085191731810993201706776838934766764778739502174470268627820918553842225858306408301661862900358266857238210235802504351951472997919676524004784236376453347268364152648346245840573214241419937917242918602639810097866942392015404620153818671425739835074851396421139982713640679581178458198658692285968043243656709796000");

//        private const int N = 3500;
//        private static readonly BigInteger Result = BigInteger.Parse("128013529779468136153585136825101961538900481122065445964837651183086898754026550517136497483483470641608626276464055059332628575928521597999901718592957423352363167465917636140408184822379391543598931815814725878528845711814356562816020703656120345663431005792446926782064141406206872674044496382612109555705276756054608939403080010257497520565825039141232590185236536300243432404427078483449695275223922784635210975743019657462141365577883788628334421325013343898945369582265133225052581547429120787483968895443714869214153983484196368957200111230649716136282989616442150717747827588840460128198812637224475960962985001698982034192388374058622072865322851268191822192497641904232912275607663029887240803055414422300714028137340125");

//        private const int N = 4000;
//        private static readonly BigInteger Result = BigInteger.Parse("39909473435004422792081248094960912600792570982820257852628876326523051818641373433549136769424132442293969306537520118273879628025443235370362250955435654171592897966790864814458223141914272590897468472180370639695334449662650312874735560926298246249404168309064214351044459077749425236777660809226095151852052781352975449482565838369809183771787439660825140502824343131911711296392457138867486593923544177893735428602238212249156564631452507658603400012003685322984838488962351492632577755354452904049241294565662519417235020049873873878602731379207893212335423484873469083054556329894167262818692599815209582517277965059068235543139459375028276851221435815957374273143824422909416395375178739268544368126894240979135322176080374780998010657710775625856041594078495411724236560242597759185543824798332467919613598667003025993715274875");

//        private const int N = 4156;
//        private static readonly BigInteger Result = BigInteger.Parse("15964226346712186988423616385712959559419225258999968786196601154629100707270891731063521937951765264707382692496403185489311616615509695531427536694129347437469926134811655883708754021737550742574652230087979866391217773655445700887988822356621775547944534135339139984143789646566282382130960353461673728038936517311051846673946576509575560465787462510249696124347225106342412474615801460184911177947298019035052983501701882108890321288063505982237320662905525161910889101509866396558514355963045635827070891393341377685868487919983014271837693113346665959129400537421972118370862042813077484155222450464527126451638662991673413064919718126844193962545020345962843336647466109590841562085253621426931093844317394032273018498612890988332114981446839130723681962182774731789883094294811022619026734672405318368361612973163681443996361915200082124209793478899199632511667");

//        private const int N = 9999;
//        private static readonly BigInteger Result = BigInteger.Parse("20793608237133498072112648988642836825087036094015903119682945866528501423455686648927456034305226515591757343297190158010624794267250973176133810179902738038231789748346235556483191431591924532394420028067810320408724414693462849062668387083308048250920654493340878733226377580847446324873797603734794648258113858631550404081017260381202919943892370942852601647398213554479081823593715429566945149312993664846779090437799284773675379284270660175134664833266377698642012106891355791141872776934080803504956794094648292880566056364718187662668970758537383352677420835574155945658542003634765324541006121012446785689171494803262408602693091211601973938229446636049901531963286159699077880427720289235539329671877182915643419079186525118678856821600897520171070499437657067342400871083908811800976259727431820539554256869460815355918458253398234382360435762759823179896116748424269545924633204614137992850814352018738480923581553988990897151469406131695614497783720743461373756218685106856826090696339815490921253714537241866911604250597353747823733268178182198509240226955826416016690084749816072843582488613184829905383150180047844353751554201573833105521980998123833253261228689824051777846588461079790807828367132384798451794011076569057522158680378961532160858387223882974380483931929541222100800313580688585002598879566463221427820448492565073106595808837401648996423563386109782045634122467872921845606409174360635618216883812562321664442822952537577492715365321134204530686742435454505103269768144370118494906390254934942358904031509877369722437053383165360388595116980245927935225901537634925654872380877183008301074569444002426436414756905094535072804764684492105680024739914490555904391369218696387092918189246157103450387050229300603241611410707453960080170928277951834763216705242485820801423866526633816082921442883095463259080471819329201710147828025221385656340207489796317663278872207607791034431700112753558813478888727503825389066823098683355695718137867882982111710796422706778536913192342733364556727928018953989153106047379741280794091639429908796650294603536651238230626");

        #endregion

        #region setup/tearDown

        [SetUp]
        public void Init()
        {
            _stopWatch = new Stopwatch();
            _stopWatch.Start();
        }

        [TearDown]
        public void Cleanup()
        {
            _stopWatch.Stop();
            Console.WriteLine(_stopWatch.ElapsedMilliseconds);
        }

        #endregion

        #region tests

        [Test]
        public void Recursive()
        {
            Assert.AreEqual(Result, (BigInteger) FibonacciGenerator.Fib(N));
        }

        [Test]
        public void Sorted()
        {
            var gen = FibonacciGenerator.BuildGenerator(Type.Sorted);
            Assert.AreEqual(Result, gen.FibFromCache(N));
        }

        [Test]
        public void Hash()
        {
            var gen = FibonacciGenerator.BuildGenerator(Type.Hash);
            Assert.AreEqual(Result, gen.FibFromCache(N));
        }

        [Test]
        public void HashConcurrent()
        {
            var gen = FibonacciGenerator.BuildGenerator(Type.ConcurrentHash);
            Assert.AreEqual(Result, gen.FibFromCache(N));
        }

        [Test]
        public void Iteration()
        {
            Assert.AreEqual(Result, FibonacciGenerator.FibonacciNumber(N));
        }

        #endregion
    }
}