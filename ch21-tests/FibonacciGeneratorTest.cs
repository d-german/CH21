using System;
using System.Diagnostics;
using System.Numerics;
using NUnit.Framework;

namespace ch21_tests
{
    public class FibonacciGeneratorTest
    {
        private Stopwatch _stopWatch;

        // small
//        private const int N = 6;
//        private static readonly BigInteger Result = 8;

//        private const int N = 20;
//        private static readonly BigInteger Result = 6765;

        // medium
//        private const int N = 40;
//        private const ulong Result = 102334155;

        // large
//        private const int N = 45;
//        private static readonly BigInteger Result = 1134903170;

//        private const int N = 1500;
//        private static readonly BigInteger Result = BigInteger.Parse("13551125668563101951636936867148408377786010712418497242133543153221487310873528750612259354035717265300373778814347320257699257082356550045349914102924249595997483982228699287527241931811325095099642447621242200209254439920196960465321438498305345893378932585393381539093549479296194800838145996187122583354898000");

//        private const int N = 4000;
//        private static readonly BigInteger Result = BigInteger.Parse("39909473435004422792081248094960912600792570982820257852628876326523051818641373433549136769424132442293969306537520118273879628025443235370362250955435654171592897966790864814458223141914272590897468472180370639695334449662650312874735560926298246249404168309064214351044459077749425236777660809226095151852052781352975449482565838369809183771787439660825140502824343131911711296392457138867486593923544177893735428602238212249156564631452507658603400012003685322984838488962351492632577755354452904049241294565662519417235020049873873878602731379207893212335423484873469083054556329894167262818692599815209582517277965059068235543139459375028276851221435815957374273143824422909416395375178739268544368126894240979135322176080374780998010657710775625856041594078495411724236560242597759185543824798332467919613598667003025993715274875");

        // large causes stack overflow
//        private const int N = 4156;
//        private const ulong Result = 16574604806748148403;

        private const int N = 9999;
        private static readonly BigInteger Result = BigInteger.Parse("20793608237133498072112648988642836825087036094015903119682945866528501423455686648927456034305226515591757343297190158010624794267250973176133810179902738038231789748346235556483191431591924532394420028067810320408724414693462849062668387083308048250920654493340878733226377580847446324873797603734794648258113858631550404081017260381202919943892370942852601647398213554479081823593715429566945149312993664846779090437799284773675379284270660175134664833266377698642012106891355791141872776934080803504956794094648292880566056364718187662668970758537383352677420835574155945658542003634765324541006121012446785689171494803262408602693091211601973938229446636049901531963286159699077880427720289235539329671877182915643419079186525118678856821600897520171070499437657067342400871083908811800976259727431820539554256869460815355918458253398234382360435762759823179896116748424269545924633204614137992850814352018738480923581553988990897151469406131695614497783720743461373756218685106856826090696339815490921253714537241866911604250597353747823733268178182198509240226955826416016690084749816072843582488613184829905383150180047844353751554201573833105521980998123833253261228689824051777846588461079790807828367132384798451794011076569057522158680378961532160858387223882974380483931929541222100800313580688585002598879566463221427820448492565073106595808837401648996423563386109782045634122467872921845606409174360635618216883812562321664442822952537577492715365321134204530686742435454505103269768144370118494906390254934942358904031509877369722437053383165360388595116980245927935225901537634925654872380877183008301074569444002426436414756905094535072804764684492105680024739914490555904391369218696387092918189246157103450387050229300603241611410707453960080170928277951834763216705242485820801423866526633816082921442883095463259080471819329201710147828025221385656340207489796317663278872207607791034431700112753558813478888727503825389066823098683355695718137867882982111710796422706778536913192342733364556727928018953989153106047379741280794091639429908796650294603536651238230626");

        [SetUp]
        public void Init()
        {
            _stopWatch = new Stopwatch();
            _stopWatch.Start();
        }

        [TearDown]
        public void Cleanup()
        {
            _stopWatch.Stop();
            Console.WriteLine(_stopWatch.ElapsedMilliseconds);
        }

        [Test]
        public void Recursive()
        {
            var gen = FibonacciGenerator.BuildFibonacciGenerator("");
            var result = gen.Fib(N);
            Assert.AreEqual(Result, result);
        }

        [Test]
        public void NonRecursive()
        {
            var gen = FibonacciGenerator.BuildFibonacciGenerator("");
            var result = gen.FibonacciNumber(N);
            Assert.AreEqual(Result, result);
        }

        [Test]
        public void SortedCached()
        {
            var gen = FibonacciGenerator.BuildFibonacciGenerator("SortedDictionary");
            var result = gen.FibFromCache(N);
            Assert.AreEqual(Result, result);
        }

        [Test]
        public void HashCached()
        {
            var gen = FibonacciGenerator.BuildFibonacciGenerator("");
            var result = gen.FibFromCache(N);

            Assert.AreEqual(Result, result);
        }
    }
}